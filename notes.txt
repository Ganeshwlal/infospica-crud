Contact Management system - CRUD Application

1. Create an angular project
2. Install Bootstrap and fontawesome or paste cdn link of bootstrap and fontawesome
3. Add google fonts link


4.Create component needed for project
    allcontact
    addContact
    updateContact
    viewContact
    navbar
5. Set up the path for each component that we need to display in web page
    -    Inside app-routing.module.ts , routes array
    - use router-outlet selector inside appComponent.html pahge
        to view the requested component

6. Design html page of each component


7. Set up the path for each component that we need to display in webpage.
    - Inside app-routing.module.ts , routes array
    - use router-outlet selector inside appComponent.hrml page
    to view the requested component

8. Design html page of each component

9. Set up the server api -              JSON placeholder
    -create server folder inside the project
    - Create db.json file
    - open cmd from server folder   
        - create package.json file = npm init
        -install json-server inside server folder - npm i json-server
        -update package.json file, script as 
        "start": "json-server --watch db.json --port 3000 "
        -to run server use command :-npm start
    
10. create model for contacts and group
    -create model folder in src folder
    - create myContact.ts file 
    - create myGroup.ts

11. create an angular service for making api call

12. to get http methods  - get,post,put,patch,delete
    - import HttpClientModule in app.module.ts
    - HttpClient
    - dependency inject HttpClient in api service  ts file











                    BASIC BUILDING BLOCKS

1. Module - used to add 3rd party libraries
2. Component - To create html page - (html,css,ts)
3. Selector - used to replace it html corresponding to the component
4. Angular Services - Reusable code that can share between components
5. Asynchronous function - RxJs
6. Observable - 
        subscribe(call back)
7. To get http methods
8. Dependency Injection - perform inside constructor
    syntax : access specifier variable-name : class-name
9. Data Binding  - data sharing inside a component
    - One way ninging




11. Pipe - transform user input



